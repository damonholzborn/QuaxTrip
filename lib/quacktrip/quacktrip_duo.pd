#N canvas 116 99 866 678 12;
#X declare -path lib;
#X obj 71 485 out-panel;
#X obj 71 62 in-panel;
#X obj 70 166 quack-panel 1;
#N canvas 508 40 932 862 more-stuff 0;
#X obj 70 599 declare -path lib;
#X text 63 15 MORE DETAILS;
#X text 20 36 Quacktrip is best suited for small (2 or 3 people) rehearsals
in which connections can run point-to-point. This gives the lowest
latency (delay) you can get \, but gets messy when more than three
people are involved. Also \, to reduce latency \, late or missing audio
is simply replaced with silence---so this solution is probably not
suitable for performances.;
#X text 25 635 This is open-source software with a BSD license.;
#X text 21 283 Anyway \, if you're using quacktrip \, the simplest
setup is to download the app (available either for Mac or PC \, assuming
I can get them both working). But in fact the "app" is really just
a copy of Pure Data configured to load this patch automatically. You
can also just download the patch and run it (along with whatever else
you want) from Pd itself. You can then modify things to \, for instance
\, place calls to more than one remote computer (just duplicate the
objects) \, or script the quack-panel object (as in the message box
below - the name "quack-panel-1" addresses the "quack-panel 1" object
in this patch). You might also want to assign input and output channels
differently by replacing the in-panel and out-panel objects. While
you're at it \, consider learning more about Pd - you can do a lot
with it :);
#X text 518 23 NETWORK HACKERY:;
#X text 473 49 By default quacktrip uses a 'conniption' server at foo.ucsd.edu
\, port 3840 (hexadecimal "f00") to connect calls. You can enter an
alternative server name or IP address in the "server" control. Or you
can set that up automatically as in teh message box at bottom left.
;
#X text 20 510 Note: the quacktrip-panel and other objects used here
are in the "lib" subdirectory of this directory - this is specified
by the "declare" object in this window. If you rearrange the directory
structure you'll have to change the declare object to reflect that.
;
#X text 467 132 The conniption server itself is just another Pd patch
\, included in the "lib" directory here. If you want to make calls
between computers behind the same router \, you will need also to run
a copy of that patch behind the same router. It can reside on one of
the computers you're connecting. Calls between two patches on the same
computer won't work (but see below about client/server mode).;
#X text 521 244 LATENCY TESTING:;
#X text 524 478 CLIENT/SERVER MODE AND OTHER SETUPS:;
#X text 19 153 IEM offers a much more complete open-source solution
called vrr that can handle several performers and is OK for actual
performances and recordings: https://vrr.iem.sh/ . Vrr uses a hub-and-spoke
design in which a centrally placed computer mixes all the audio and
can re-broadcast it. (The advantage to using quacktrip is that it's
simpler to use and doesn't require a centrally placed sound engineer.)
Like quacktrip \, vrr is open source free software.;
#X text 290 665 <--- this is for testing behind a common NAT router
using a local conniption server. It won't work unless you have one
set up., f 45;
#X text 468 259 You can measure round-trip latency by opening the quacktrip
panels at both ends of a call. (First \, set the input gains to zero.)
You open them by right-clicking the panels. Inside _that_ there's a
sub-patch called "latency". At one end \, select "loop-back" \, and
on the other \, "measure latency". At bottom in the window you should
see the measured latency in msec. If the audio breaks up a button will
flash and the readout will be wrong. Between two machines on the same
network I was able to get 16 msec latency \, using block size 64 and
FIFO size 7 Increasing block size to 128 might make the network run
more smoothly but I've never noticed a difference. In this case the
minimum latency seems to be 18 msec. I haven't done any latency testing
across real networks yet.;
#X text 474 497 The "quacktrip" object can be configured as a jacktrip-
compatible server or client - this might be useful if you want to use
quacktrip with jacktrip \, or to build a hub-and-spoke solution like
vrr. See the quacktrip help window for a very rough example. In this
usage you don't need a conniption server at all. OR... you can use
the conniption server without quacktrip to make other kinds of peer-to-peer
connections \, such as sending Pd messages from one machine to another.
;
#X msg 34 662 \; quack-panel-1 server 192.168.1.65 \; quack-panel-1
call-name poodle;
#X text 63 724 place a call via server;
#X msg 242 759 \; quack-panel-1 call-name port_4477 \, server localhost
\, on-off 1, f 68;
#X text 114 762 test: localhost \, client, f 16;
#X text 140 809 test: server;
#X msg 241 803 \; quack-panel-1 call-name port_4477 \, server me \,
on-off 1, f 68;
#X msg 242 720 \; quack-panel-1 call-name fred \, server foo.ucsd.edu
\, on-off 1;
#X restore 731 624 pd more-stuff;
#X text 49 13 quacktrip v 0.6. Peer-to-peer jacktrip connections.,
f 53;
#X text 440 8;
#X obj 404 480 out-panel;
#X obj 404 57 in-panel;
#X obj 403 161 quack-panel 1;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 0 0;
#X connect 2 1 0 1;
#X connect 7 0 8 0;
#X connect 7 1 8 1;
#X connect 8 0 6 0;
#X connect 8 1 6 1;
